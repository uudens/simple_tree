{"version":3,"file":"public/javascripts/spec.js","sources":["app/spec/tree.coffee","app/spec/tree_node.coffee"],"names":[],"mappingsnIA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;;A","sourcesContent":["var Tree;\n\nTree = require('../entities/tree');\n\ndescribe(\"Tree\", function() {\n  beforeEach(function() {\n    return this._data = {\n      isRecursive: true,\n      children: [\n        {\n          label: 'topLevel1'\n        }, {\n          label: 'topLevel2',\n          children: [\n            {\n              label: '2ndLevel1'\n            }\n          ]\n        }\n      ]\n    };\n  });\n  describe('#parse', function() {\n    describe('when isRecursive: true', function() {\n      it('should call #getChildCollectionRecursively', function() {\n        var tree;\n        tree = new Tree;\n        spyOn(tree, 'getChildCollectionRecursively');\n        tree.set(tree.parse(this._data));\n        return expect(tree.getChildCollectionRecursively).toHaveBeenCalled();\n      });\n      return it('should not call #getChildCollectionIteratively', function() {\n        var tree;\n        tree = new Tree;\n        spyOn(tree, 'getChildCollectionIteratively');\n        tree.set(tree.parse(this._data));\n        return expect(tree.getChildCollectionIteratively).not.toHaveBeenCalled();\n      });\n    });\n    return describe('when isRecursive: false', function() {\n      beforeEach(function() {\n        return this._data.isRecursive = false;\n      });\n      it('should not call #getChildCollectionRecursively', function() {\n        var tree;\n        tree = new Tree;\n        spyOn(tree, 'getChildCollectionRecursively');\n        tree.set(tree.parse(this._data));\n        return expect(tree.getChildCollectionRecursively).not.toHaveBeenCalled();\n      });\n      return it('should call #getChildCollectionIteratively', function() {\n        var tree;\n        tree = new Tree;\n        spyOn(tree, 'getChildCollectionIteratively');\n        tree.set(tree.parse(this._data));\n        return expect(tree.getChildCollectionIteratively).toHaveBeenCalled();\n      });\n    });\n  });\n  describe('#getChildCollectionRecursively', function() {\n    it('should be recursive (call itself)', function() {\n      var collection, tree;\n      tree = new Tree;\n      spyOn(tree, 'getChildCollectionRecursively').and.callThrough();\n      collection = tree.getChildCollectionRecursively(this._data.children);\n      return expect(tree.getChildCollectionRecursively.calls.count()).toBeGreaterThan(1);\n    });\n    it('should generate nested child collections and models', function() {\n      var collection, tree;\n      tree = new Tree;\n      collection = tree.getChildCollectionRecursively(this._data.children);\n      expect(collection instanceof Backbone.Collection).toBe(true);\n      expect(collection.at(1) instanceof Backbone.Model).toBe(true);\n      return expect(collection.at(1).get('children') instanceof Backbone.Collection).toBe(true);\n    });\n    return it('should populate models with data from JSON', function() {\n      var collection, tree;\n      tree = new Tree;\n      collection = tree.getChildCollectionRecursively(this._data.children);\n      expect(collection.at(0).get('label')).toBe('topLevel1');\n      expect(collection.at(1).get('label')).toBe('topLevel2');\n      return expect(collection.at(1).get('children').at(0).get('label')).toBe('2ndLevel1');\n    });\n  });\n  describe('#getChildCollectionIteratively', function() {\n    it('should not be recursive (not call itself)', function() {\n      var collection, tree;\n      tree = new Tree;\n      spyOn(tree, 'getChildCollectionIteratively').and.callThrough();\n      collection = tree.getChildCollectionIteratively(this._data.children);\n      return expect(tree.getChildCollectionIteratively.calls.count()).toBe(1);\n    });\n    it('should generate nested child collections and models', function() {\n      var collection, tree;\n      tree = new Tree;\n      collection = tree.getChildCollectionIteratively(this._data.children);\n      expect(collection instanceof Backbone.Collection).toBe(true);\n      expect(collection.at(1) instanceof Backbone.Model).toBe(true);\n      return expect(collection.at(1).get('children') instanceof Backbone.Collection).toBe(true);\n    });\n    return it('should populate models with data from JSON', function() {\n      var collection, tree;\n      tree = new Tree;\n      collection = tree.getChildCollectionIteratively(this._data.children);\n      expect(collection.at(0).get('label')).toBe('topLevel1');\n      expect(collection.at(1).get('label')).toBe('topLevel2');\n      return expect(collection.at(1).get('children').at(0).get('label')).toBe('2ndLevel1');\n    });\n  });\n  return describe('#loadDefault', function() {\n    it('should GET data/tree', function() {\n      var ajaxArgs, tree;\n      tree = new Tree;\n      spyOn($, 'ajax');\n      tree.loadDefault();\n      ajaxArgs = _.first($.ajax.calls.argsFor(0));\n      expect(ajaxArgs.type).toBe('get');\n      return expect(ajaxArgs.url).toBe('data/tree');\n    });\n    return it('should parse result', function() {\n      var ajaxArgs, tree;\n      tree = new Tree;\n      spyOn($, 'ajax');\n      spyOn(tree, 'parse');\n      tree.loadDefault();\n      ajaxArgs = _.first($.ajax.calls.argsFor(0));\n      ajaxArgs.success(this._data);\n      return expect(tree.parse).toHaveBeenCalledWith(this._data);\n    });\n  });\n});\n","var TreeNode;\n\nTreeNode = require('../entities/tree_node');\n\ndescribe(\"TreeNode\", function() {\n  return describe('#initialize', function() {\n    it('should generate id if not provided', function() {\n      var node;\n      node = new TreeNode;\n      return expect(node.id).toBeTruthy();\n    });\n    it('should not overwrite id if it\\'s provided', function() {\n      var node;\n      node = new TreeNode({\n        id: 1\n      });\n      return expect(node.id).toBe(1);\n    });\n    it('should have children collection even if not provided', function() {\n      var node;\n      node = new TreeNode;\n      return expect(node.get('children') instanceof Backbone.Collection).toBe(true);\n    });\n    return it('should not overwrite children collection if it\\'s provided', function() {\n      var children, node;\n      children = new Backbone.Collection;\n      node = new TreeNode({\n        children: children\n      });\n      return expect(node.get('children')).toBe(children);\n    });\n  });\n});\n"]}