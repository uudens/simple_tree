{"version":3,"file":"public/javascripts/app.js","sources":["app/application.coffee","app/entities/tree.coffee","app/entities/tree_node.coffee","app/entities/tree_nodes.coffee","app/initialize.coffee","app/lib/event_hub.coffee","app/lib/router.coffee","app/lib/trees.coffee","app/lib/view_helper.coffee","app/spec/tree_node.coffee","app/views/section_view.coffee","app/views/templates/section_view.hbs","app/views/templates/tree_node_view.hbs","app/views/tree_node_view.coffee","app/views/view.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvzGA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;A,CCAA;;AACA;AACA;AAFA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxFA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9GA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;A","sourcesContent":["var Application, Router, SectionView;\n\nRouter = require('lib/router');\n\nSectionView = require('views/section_view');\n\nmodule.exports = Application = (function() {\n\n  function Application() {\n    _.extend(this, Backbone.Events);\n    this.router = new Router;\n    this.listenTo(this.router, 'route:defaultRoute', this._showSection);\n  }\n\n  Application.prototype._showSection = function() {\n    var section;\n    section = new SectionView;\n    return $('body').append(section.render().el);\n  };\n\n  return Application;\n\n})();\n","var Tree, TreeNode, TreeNodes,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nTreeNode = require('./tree_node');\n\nTreeNodes = require('./tree_nodes');\n\nmodule.exports = Tree = (function(_super) {\n\n  __extends(Tree, _super);\n\n  function Tree() {\n    return Tree.__super__.constructor.apply(this, arguments);\n  }\n\n  Tree.prototype.id = 1;\n\n  Tree.prototype.localStorage = new Backbone.LocalStorage('tree');\n\n  Tree.prototype.parse = function(data) {\n    if (typeof data !== 'object') {\n      return;\n    }\n    data.isRecursive = this.get('isRecursive') != null ? this.get('isRecursive') : data.isRecursive;\n    if (data.isRecursive) {\n      console.debug('Parsing data using Recursive method');\n      data.children = this._getChildCollectionRecursively(data.children);\n    } else {\n      console.debug('Parsing data using Iterative method');\n      data.children = this._getChildCollectionIteratively(data.children);\n    }\n    return data;\n  };\n\n  Tree.prototype.loadDefault = function() {\n    var _this = this;\n    return $.getJSON('data/tree', function(data) {\n      _this.set(_this.parse(data));\n      return _this.save();\n    });\n  };\n\n  Tree.prototype._getChildCollectionRecursively = function(data) {\n    var childData, collection, hasChildren, model, _i, _len;\n    collection = new TreeNodes;\n    for (_i = 0, _len = data.length; _i < _len; _i++) {\n      childData = data[_i];\n      model = new TreeNode(_.omit(childData, 'children'));\n      hasChildren = childData.children && childData.children.length;\n      if (hasChildren) {\n        model.set({\n          children: this._getChildCollectionRecursively(childData.children)\n        });\n      }\n      collection.add(model);\n    }\n    return collection;\n  };\n\n  Tree.prototype._getChildCollectionIteratively = function(data) {\n    var childData, collection, i, index, indexes, model, parentCollections, _i, _len;\n    collection = new TreeNodes;\n    parentCollections = [collection];\n    indexes = [0];\n    while (true) {\n      for (i = _i = 0, _len = indexes.length; _i < _len; i = ++_i) {\n        index = indexes[i];\n        if (!i) {\n          childData = {\n            children: data\n          };\n        }\n        childData = childData.children && childData.children[index];\n        if (!childData) {\n          indexes.pop();\n          parentCollections.pop();\n          break;\n        }\n      }\n      if (!childData) {\n        if (!indexes.length) {\n          break;\n        }\n        indexes[indexes.length - 1]++;\n        continue;\n      }\n      model = new TreeNode(_.omit(childData, 'children'));\n      _.last(parentCollections).add(model);\n      if (childData.children && childData.children.length) {\n        parentCollections.push(new TreeNodes);\n        model.set({\n          children: _.last(parentCollections)\n        });\n        indexes.push(0);\n        continue;\n      }\n      indexes[indexes.length - 1]++;\n    }\n    return collection;\n  };\n\n  return Tree;\n\n})(Backbone.Model);\n","var TreeNode, TreeNodes,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nTreeNodes = require('./tree_nodes');\n\nmodule.exports = TreeNode = (function(_super) {\n\n  __extends(TreeNode, _super);\n\n  function TreeNode() {\n    return TreeNode.__super__.constructor.apply(this, arguments);\n  }\n\n  TreeNode.prototype.initialize = function() {\n    if (!this.id) {\n      this.set({\n        id: this._getUniqueId()\n      });\n    }\n    if (!this.get('children')) {\n      return this.set({\n        children: new TreeNodes\n      });\n    }\n  };\n\n  TreeNode.prototype._getUniqueId = function() {\n    return 'n' + (Math.random() + 1).toString(36).substring(7);\n  };\n\n  return TreeNode;\n\n})(Backbone.Model);\n","var TreeNodes,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = TreeNodes = (function(_super) {\n\n  __extends(TreeNodes, _super);\n\n  function TreeNodes() {\n    return TreeNodes.__super__.constructor.apply(this, arguments);\n  }\n\n  return TreeNodes;\n\n})(Backbone.Collection);\n","var Application;\n\nApplication = require('application');\n\n$(function() {\n  new Application();\n  return Backbone.history.start();\n});\n","var EventHub;\n\nEventHub = {};\n\n_.extend(EventHub, Backbone.Events);\n\nmodule.exports = EventHub;\n","var Router, application,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\napplication = require('application');\n\nmodule.exports = Router = (function(_super) {\n\n  __extends(Router, _super);\n\n  function Router() {\n    return Router.__super__.constructor.apply(this, arguments);\n  }\n\n  Router.prototype.routes = {\n    '*path': 'defaultRoute'\n  };\n\n  return Router;\n\n})(Backbone.Router);\n","var Trees;\n\nmodule.exports = Trees = {\n  getRandom: function() {\n    return this._capitalize(_.sample(this._trees));\n  },\n  _capitalize: function(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  },\n  _trees: ['almond', 'apple', 'apricot', 'ash', 'aspen', 'baobob', 'banyan', 'bark', 'beech', 'black ash', 'black willow', 'bigtooth aspen', 'birch', 'bodhi', 'bristlecone pine', 'buckeye', 'butternut', 'cabbage palmetto', 'camellia', 'catalpa', 'cedar', 'cherry', 'chestnut', 'choke cherry', 'coconut palm', 'cone', 'cottonwood', 'crape myrtle', 'crabapple', 'cypress', 'date', 'dogwood', 'Douglas fir', 'elderberry', 'elm', 'eucalyptus', 'evergreen', 'fig', 'filbert', 'fir', 'flame tree', 'forest', 'ginkgo', 'goldenlarch', 'grapefruit', 'grove', 'gum', 'hackberry', 'haw', 'hawthorn', 'hemlock', 'hickory', 'holly', 'honeylocust', 'ipil', 'ironwood', 'jack pine', 'jacktree', 'Japanese maple', 'jujuba', 'jungle', 'juniper', 'kapok tree', 'katsura', 'kukui nut', 'kumquat', 'larch', 'lilac', 'linden', 'live oak', 'loblolly pine', 'locust', 'loquat', 'lone pine', 'longleaf pine', 'magnolia', 'mahogany', 'mangrove', 'maple', 'mimosa', 'mountainash', 'nectarine', 'northern red oak', 'Norway maple', 'oak', 'olive', 'orange', 'paper birch', 'palm', 'palmetto', 'pawpaw', 'peach', 'pear', 'pecan', 'persimmon', 'pine', 'piñon pine', 'plum', 'poplar', 'quaking aspen', 'quince', 'rain forest', 'redbud', 'redwood', 'rings', 'rubber tree', 'sassafras', 'Scotch pine', 'sequoia', 'serviceberry', 'silver maple', 'Sitka spruce', 'slippery elm', 'spruce', 'sugar maple', 'sweetgum', 'sycamore', 'teak', 'tree', 'tulip-tree', 'tupelo', 'upright red maple', 'viburnum', 'walnut', 'weeping willow', 'white ash', 'white oak', 'white pine', 'willow', 'wingnut', 'witchhazel', 'yellowwood', 'yew', 'zebrawood', 'zelkova']\n};\n","\n\n","var TreeNode;\n\nTreeNode = require('../entities/tree_node');\n\ndescribe(\"someTest\", function() {\n  return it('should be true', function() {\n    return expect(true).toBe(true);\n  });\n});\n","var EventHub, SectionView, Tree, TreeNodeView, template,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nTree = require('../entities/tree');\n\nTreeNodeView = require('./tree_node_view');\n\nEventHub = require('../lib/event_hub');\n\ntemplate = require('./templates/section_view');\n\nmodule.exports = SectionView = (function(_super) {\n\n  __extends(SectionView, _super);\n\n  function SectionView() {\n    return SectionView.__super__.constructor.apply(this, arguments);\n  }\n\n  SectionView.prototype.tagName = 'section';\n\n  SectionView.prototype.template = template;\n\n  SectionView.prototype.events = {\n    'click .reset': '_reset',\n    'change input[name=\"isRecursive\"]': '_onParseMethodChange'\n  };\n\n  SectionView.prototype.ui = {\n    treeContainer: '.tree-container',\n    recursiveBox: 'input[name=\"isRecursive\"]'\n  };\n\n  SectionView.prototype._tree = null;\n\n  SectionView.prototype.initialize = function() {\n    _.bindAll(this);\n    this.listenTo(EventHub, 'node_updated node_added node_removed', this._saveTree);\n    return this._loadTree();\n  };\n\n  SectionView.prototype.serializeData = function() {\n    return {\n      isRecursive: this._tree.get('isRecursive')\n    };\n  };\n\n  SectionView.prototype.render = function() {\n    var rootNode;\n    SectionView.__super__.render.apply(this, arguments);\n    if (this._tree) {\n      this.ui.treeContainer.empty();\n      rootNode = new TreeNodeView({\n        model: this._tree,\n        eventHub: EventHub\n      });\n      this.ui.treeContainer.append(rootNode.render().el);\n    }\n    return this;\n  };\n\n  SectionView.prototype._reset = function() {\n    return this._tree.loadDefault(this.render);\n  };\n\n  SectionView.prototype._loadTree = function() {\n    this._tree = new Tree;\n    this.listenTo(this._tree, 'sync', this.render);\n    return this._tree.fetch();\n  };\n\n  SectionView.prototype._saveTree = function() {\n    if (this._tree) {\n      return this._tree.save();\n    }\n  };\n\n  SectionView.prototype._onParseMethodChange = function() {\n    this._tree.set({\n      isRecursive: this.ui.recursiveBox.filter(':checked').val() === 'true'\n    });\n    return this._saveTree();\n  };\n\n  return SectionView;\n\n})(Marionette.ItemView);\n","module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  helpers = helpers || Handlebars.helpers;\n  var buffer = \"\", stack1, stack2, foundHelper, tmp1, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" checked\";}\n\nfunction program3(depth0,data) {\n  \n  \n  return \" checked\";}\n\n  buffer += \"<header>\\n\t<h1>Tree</h1>\\n\t<div class=\\\"settings\\\">\\n\t\t<button class=\\\"reset\\\">Load default data</button>\\n\t\t<input type=\\\"radio\\\" name=\\\"isRecursive\\\" value=\\\"true\\\"\";\n  foundHelper = helpers.isRecursive;\n  stack1 = foundHelper || depth0.isRecursive;\n  stack2 = helpers['if'];\n  tmp1 = self.program(1, program1, data);\n  tmp1.hash = {};\n  tmp1.fn = tmp1;\n  tmp1.inverse = self.noop;\n  stack1 = stack2.call(depth0, stack1, tmp1);\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \" />Use recursive data parsing\\n\t\t<input type=\\\"radio\\\" name=\\\"isRecursive\\\" value=\\\"false\\\"\";\n  foundHelper = helpers.isRecursive;\n  stack1 = foundHelper || depth0.isRecursive;\n  stack2 = helpers.unless;\n  tmp1 = self.program(3, program3, data);\n  tmp1.hash = {};\n  tmp1.fn = tmp1;\n  tmp1.inverse = self.noop;\n  stack1 = stack2.call(depth0, stack1, tmp1);\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \" />Use iterative data parsing\\n\t</div>\\n</header>\\n<ul class=\\\"tree-container\\\"></ul>\\n\";\n  return buffer;});","module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  helpers = helpers || Handlebars.helpers;\n  var buffer = \"\", stack1, foundHelper, self=this, functionType=\"function\", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"itemHead\\\">\\n\t<button class=\\\"delete\\\">Delete</button>\\n\t<button class=\\\"add\\\">Add</button>\\n\t<p class=\\\"label\\\">\";\n  foundHelper = helpers.label;\n  stack1 = foundHelper || depth0.label;\n  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }\n  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, \"label\", { hash: {} }); }\n  buffer += escapeExpression(stack1) + \"</p>\\n</div>\\n<ul class=\\\"children\\\"></ul>\\n\";\n  return buffer;});","var TreeNode, TreeNodeView, Trees, template,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\ntemplate = require('./templates/tree_node_view');\n\nTreeNode = require('../entities/tree_node');\n\nTrees = require('../lib/trees');\n\nmodule.exports = TreeNodeView = (function(_super) {\n\n  __extends(TreeNodeView, _super);\n\n  function TreeNodeView() {\n    return TreeNodeView.__super__.constructor.apply(this, arguments);\n  }\n\n  TreeNodeView.prototype.template = template;\n\n  TreeNodeView.prototype.tagName = 'li';\n\n  TreeNodeView.prototype.childViewContainer = '.children';\n\n  TreeNodeView.prototype.events = {\n    'click .delete': '_onDeleteClick',\n    'click .add': '_onAddClick',\n    'dblclick .label': '_onLabelDoubleClick',\n    'keydown': '_onKeyDown'\n  };\n\n  TreeNodeView.prototype.ui = {\n    label: '.label'\n  };\n\n  TreeNodeView.prototype._eventHub = null;\n\n  TreeNodeView.prototype._isEditing = false;\n\n  TreeNodeView.prototype.initialize = function(_arg) {\n    this._eventHub = _arg.eventHub;\n    _.bindAll(this);\n    return this.collection = this.model.get('children');\n  };\n\n  TreeNodeView.prototype.childViewOptions = function() {\n    return {\n      eventHub: this._eventHub\n    };\n  };\n\n  TreeNodeView.prototype._edit = function() {\n    this._isEditing = true;\n    $(document).on('click', this._onDocumentClickWhileEditing);\n    return this.ui.label.prop('contenteditable', true).focus();\n  };\n\n  TreeNodeView.prototype._stopEdit = function() {\n    this._isEditing = false;\n    $(document).off('click', this._onDocumentClickWhileEditing);\n    this.ui.label.prop('contenteditable', false);\n    this.model.set('label', this.ui.label.html());\n    return this._trigger('node_updated');\n  };\n\n  TreeNodeView.prototype._trigger = function(type) {\n    if (this._eventHub) {\n      return this._eventHub.trigger(type);\n    }\n  };\n\n  TreeNodeView.prototype._onDeleteClick = function(e) {\n    e.stopPropagation();\n    this.model.collection.remove(this.model);\n    return this._trigger('node_removed');\n  };\n\n  TreeNodeView.prototype._onAddClick = function(e) {\n    e.stopPropagation();\n    this.collection.add(new TreeNode({\n      label: Trees.getRandom()\n    }));\n    return this._trigger('node_added');\n  };\n\n  TreeNodeView.prototype._onLabelDoubleClick = function(e) {\n    e.stopPropagation();\n    return this._edit();\n  };\n\n  TreeNodeView.prototype._onKeyDown = function(e) {\n    if (e.which !== 13) {\n      return;\n    }\n    if (!this._isEditing) {\n      return;\n    }\n    return this._stopEdit();\n  };\n\n  TreeNodeView.prototype._onDocumentClickWhileEditing = function(e) {\n    if (e.target === this.ui.label.get(0)) {\n      return;\n    }\n    return this._stopEdit();\n  };\n\n  return TreeNodeView;\n\n})(Marionette.CompositeView);\n","var View,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nrequire('lib/view_helper');\n\nmodule.exports = View = (function(_super) {\n\n  __extends(View, _super);\n\n  function View() {\n    this.render = __bind(this.render, this);\n    return View.__super__.constructor.apply(this, arguments);\n  }\n\n  View.prototype.template = function() {};\n\n  View.prototype.getRenderData = function() {};\n\n  View.prototype.render = function() {\n    this.$el.html(this.template(this.getRenderData()));\n    this.afterRender();\n    return this;\n  };\n\n  View.prototype.afterRender = function() {};\n\n  return View;\n\n})(Backbone.View);\n"]}